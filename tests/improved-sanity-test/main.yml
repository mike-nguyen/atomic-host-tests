---
# vim: set ft=ansible:
#
# !!!NOTE!!! This playbook was tested using Ansible 2.2; it is recommended
# that the same version is used.
#
# This playbook is actually multiple playbooks contained in a single file.
# I had to take this approach, because I encountered difficulties re-using
# the same roles with non-unique variables.  Sometimes the roles would be
# executed with the use of the 'always' tag, sometimes not.
#
# The wrinkle in this approach is that sharing global variables across the
# multiple playbooks requires the use of a file containing the variables
# which is included in each playbook with the 'vars_files' directive.
#
# The sanity tests performed in this set of playbooks:
#   - check permissions on /tmp are correct (RHBZ 1276775) after each reboot
#   - add user to system, verify it is present after upgrade
#   - make changes to /etc, verify changes are present after upgrade
#   - add directory/file to /var, verify they persist after upgrade/rollback
#   - add user post-upgrade, verify it is not present after rollback
#   - add directory/file to /var post-upgrade, verify they persist after
#     rollback
#
# The intent is to expand the sanity test coverage in this set of playbooks
# with small, focused tests going forward.  Additional functional tests that
# are more expansive should be handled in separate playbooks.
#
- name: Improved Sanity Test
  hosts: "{{ subjects | default('all') }}"
  become: true

  vars_files:
    - "vars/common.yml"
    - ["vars/{{ ansible_distribution|lower }}.yml", "vars/os_defaults.yml"]

  vars:
    tests: []

  tasks:
    # The ansible_failed_result and ansible_failed_task variable cannot be
    # accessed in a loop (BUGID) so each include must be called individually
    - block:
        - import_tasks: 'pre-upgrade.yml'
          tags:
            - pre-upgrade

        - set_fact:
            tests: "{{ tests + [ { 'name': 'pre-upgrade', 'result': 'passed', 'failure': '' } ]  }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name': 'pre-upgrade', 'result': 'failed', 'failure': ansible_failed_result } ]  }}"

    # There isn't a point of continuing on failure so check for errors
    - when: '"failed" in item["result"]'
      fail:
        msg: |
          {{ item['name'] }}

          {{ item['result'] }}

          {{ item['failure'] | to_nice_yaml(indent=2) }}
      with_items: "{{ tests }}"

    - block:
        - import_tasks: 'post-upgrade.yml'
          tags:
            - post-upgrade

        - set_fact:
            tests: "{{ tests + [ { 'name': 'post-upgrade', 'result': 'passed', 'failure': '' } ]  }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name': 'post-upgrade', 'result': 'failed', 'failure': ansible_failed_result } ]  }}"

    - when: '"failed" in item["result"]'
      fail:
        msg: |
          {{ item['name'] }}

          {{ item['result'] }}

          {{ item['failure'] | to_nice_yaml(indent=2) }}
      with_items: "{{ tests }}"

    - block:
        - import_tasks: 'post-rollback.yml'
          tags:
            - post-rollback

        - set_fact:
            tests: "{{ tests + [ { 'name': 'post-rollback', 'result': 'passed', 'failure': '' } ]  }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name': 'post-rollback', 'result': 'failed', 'failure': ansible_failed_result } ]  }}"

    - when: '"failed" in item["result"]'
      fail:
        msg: |
          {{ item['name'] }}

          {{ item['result'] }}

          {{ item['failure'] | to_nice_yaml(indent=2) }}
      with_items: "{{ tests }}"

    - debug:
        msg: "{{ tests | to_nice_yaml(indent=2) }}"
